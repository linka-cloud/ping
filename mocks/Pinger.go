// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import net "net"
import ping "gitlab.bertha.cloud/partitio/isi/ping"

// Pinger is an autogenerated mock type for the Pinger type
type Pinger struct {
	mock.Mock
}

// AddAddress provides a mock function with given fields: a
func (_m *Pinger) AddAddress(a string) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Addresses provides a mock function with given fields:
func (_m *Pinger) Addresses() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Pinger) Close() {
	_m.Called()
}

// IPAddresses provides a mock function with given fields:
func (_m *Pinger) IPAddresses() []net.IPAddr {
	ret := _m.Called()

	var r0 []net.IPAddr
	if rf, ok := ret.Get(0).(func() []net.IPAddr); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]net.IPAddr)
		}
	}

	return r0
}

// IsRunning provides a mock function with given fields:
func (_m *Pinger) IsRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Privileged provides a mock function with given fields:
func (_m *Pinger) Privileged() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveAddress provides a mock function with given fields: a
func (_m *Pinger) RemoveAddress(a string) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *Pinger) Run() {
	_m.Called()
}

// Statistics provides a mock function with given fields:
func (_m *Pinger) Statistics() map[string]ping.Statistics {
	ret := _m.Called()

	var r0 map[string]ping.Statistics
	if rf, ok := ret.Get(0).(func() map[string]ping.Statistics); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]ping.Statistics)
		}
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Pinger) Stop() {
	_m.Called()
}
